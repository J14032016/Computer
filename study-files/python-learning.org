* 第一部分 python核心
** 第一章 python
*** 什么是python
Python是一门优雅而健壮的编程语言，它继承了传统编译语言的强大性和通用性，同时也
借鉴了简单脚本和解释语言的易用性。它可以帮你完成工作，而且一段时间以后，你还能
看明白自己写的这段代码。你会对自己如此快地学会它和它强大的功能感到十分的惊讶，
更不用提你已经完成的工作了！只有你想不到，没有 Python 做不到
** 第二章 python起步
*** 程序输出，print语句
Python 的主提示符( >>> )和次提示符( ... ) 。主提示符是解释器告诉你它在等待你
输入下一个语句，次提示符告诉你解释器正在等待你输入当前语句的其它部分
下划线(_)在解释器中有特别的含义，表示最后一个表达式的值

在交互式解释器中显示变量的值 
通常当你想看变量内容时，你会在代码中使用 print 语句输出。不过在交互式解释器中
你可以用 print 语句显示变量的字符串表示，或者仅使用变量名查看该变量的原始值。 
在下面的例子中，我们把一个字符串赋值给变量 myString，先用 print 来显示变量
的内容，之后用变量名称来显示。 
>>> myString = 'Hello World!' 
>>> print myString 
Hello World! 
>>> myString 
'Hello World!' 
>>> _
'Hello World!'
注意：在仅用变量名时，输出的字符串是被用单引号括起来了的。这是为了让非字符串对
象也能以字符串的方式显示在屏幕上－－即它显示的是该对象的字符串表示，而不仅仅是
字符串本身。引号表示你刚刚输入的变量的值是一个字符串

print 语句，与字符串格式运算符( % )结合使用，可实现字符串替换功能，这
一点和 C 语言中的 printf()函数非常相似： 
>>> print "%s is number %d!" % ("Python", 1) 
Python is number 1! 
注意用 % 连接

%s 表示由一个字符串来替换，而%d 表示由一个整数来替换，另外一个很常用的就是%f，
表示由一个浮点数来替换
*** 程序输入和raw_input()函数
>>> user = raw_input('Enter login name: ') 
Enter login name: root 
>>> print 'Your login is:', user 
Your login is: root 
*** 注释
和大部分脚本及Unix-shell语言一样，Python也使用#符号表示注释，从#开始，直到
一行结束的内容都是注释
*** 运算符
//和**
< >等判断符返回bool值，即True或者False
*** 变量和赋值
大小写敏感
n = n+10相当于 n += 10
但是没有自增运算 --n 被理解为 -(-n) 会得到n本身 而 n-- 会报错
*** 字符串
使用索引运算符([])和切片运算符([:])可以得到子字符串。字符串有其特有的索引规则：
第一个字符的索引是0，最后一个字符的索引是-1
加号用于字符串的连接运算，星号用于字符串的重复

>>> pystr = 'python'
>>> iscool = 'is cool!'
>>> pystr[0]
'P'
>>> pystr[2:5]    #表示从pystr[2]开始截取，直到pystr[5]的前一个字符为止
'tho' 
>>> iscool[:2]    #表示从开头截取，直到iscool[2]前一个字符为止
'is' 
>>> iscool[3:]    #表示从iscool[3]开始截取，直到结束
'cool!'
*** 定义函数
def function_name (arguments):
    "optional documentation string"
    function_suite
函数在调用前必须先定义，如果函数中没有return 语句，就会自动返回None对象。

** 第三章 Python基础
*** 语句和语法
多元赋值
>>> x, y, z = 1, 2, 'a string'
或者
>>> (x, y, z) = (1, 2, 'a string')

变量交换
>>> x, y=y, x

** 第四章 Python对象

* 第二部分 高级主题
